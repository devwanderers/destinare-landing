{"version":3,"sources":["views/AuthView/Forms/Login.js","services/yupValidations.js","components/CreateAntField/index.js"],"names":["schema","Yup","emailOrUsername","validations","mail","password","generic","initialValues","Login","onSubmit","showError","errorMessage","history","useHistory","Fragment","className","validationSchema","isSubmitting","values","component","AntInput","name","type","placeholder","hasFeedback","value","toLowerCase","AntInputPassword","iconRender","visible","message","showIcon","Item","block","htmlType","loading","style","paddingTop","paddingBottom","top","href","onClick","e","preventDefault","push","SignInPath","SUPPORTED_FORMATS","regex","min","max","matches","required","passwordConfirmation","oneOf","userName","test","validator","isAlphanumeric","walletAddress","isEthereumAddress","lowercase","email","phone","isAlpha","replace","birthDate","country","state","city","line","postalCode","file","size","includes","min20Usd","_v","parseFloat","no0Usd","boolean","onlyNumber","isColor","s","Option","color","number","array","validateIsNotCurrentUser","currentUser","currentMembers","userMail","valid","index","length","FormItem","Form","Select","CreateAntField","AntComponent","field","form","label","selectOptions","defaultSelected","submitCount","props","touched","submitted","hasError","errors","submittedError","touchedError","help","validateStatus","onBlur","setFieldTouched","onChange","target","setFieldValue","map","AntSelect","DatePicker","Input","Password","TimePicker"],"mappings":"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","file":"static/js/9.9cee2378.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { Button, Form as FormAnt, Alert } from 'antd'\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons'\r\nimport * as Yup from 'yup'\r\nimport { useHistory } from 'react-router'\r\nimport { validations } from './../../../services/yupValidations'\r\nimport {\r\n    AntInput,\r\n    AntInputPassword,\r\n} from './../../../components/CreateAntField/index'\r\nimport { SignInPath } from '../../../constants/routerConstants'\r\n\r\nconst schema = Yup.object({\r\n    emailOrUsername: validations.mail,\r\n    password: validations.generic,\r\n})\r\n\r\nconst initialValues = {\r\n    emailOrUsername: '',\r\n    password: '',\r\n}\r\n\r\nconst Login = ({ onSubmit, showError, errorMessage }) => {\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"font-medium mb-2\">Log in</div>\r\n            <Formik\r\n                validationSchema={schema}\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n            >\r\n                {({ isSubmitting, values }) => (\r\n                    <Form className=\"mb-4\">\r\n                        <Field\r\n                            component={AntInput}\r\n                            name=\"emailOrUsername\"\r\n                            type=\"email\"\r\n                            placeholder=\"Email\"\r\n                            className=\"h-12 rounded-lg\"\r\n                            hasFeedback\r\n                            value={values?.emailOrUsername.toLowerCase()}\r\n                        />\r\n                        <Field\r\n                            component={AntInputPassword}\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            className=\"h-12 rounded-lg\"\r\n                            hasFeedback\r\n                            iconRender={(visible) =>\r\n                                visible ? (\r\n                                    <EyeTwoTone />\r\n                                ) : (\r\n                                    <EyeInvisibleOutlined />\r\n                                )\r\n                            }\r\n                            value={values?.password}\r\n                        />\r\n                        {showError && (\r\n                            <Alert\r\n                                className=\"mb-5\"\r\n                                message={errorMessage}\r\n                                type=\"error\"\r\n                                showIcon\r\n                            />\r\n                        )}\r\n                        <FormAnt.Item className=\"mb-0\">\r\n                            <Button\r\n                                block\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                className=\"text-sm px-4 py-2 py h-12 rounded-full font-medium\"\r\n                                // disabled={isSubmitting}\r\n                                loading={isSubmitting}\r\n                                style={{\r\n                                    paddingTop: '9px',\r\n                                    paddingBottom: '9px',\r\n                                }}\r\n                            >\r\n                                LOGIN\r\n                            </Button>\r\n                        </FormAnt.Item>\r\n                        <div className=\"login-links flex flex-col text-center\">\r\n                            <a\r\n                                type=\"link\"\r\n                                className=\"text-sm h-auto py-0 text-black-1 hover:text-info\"\r\n                            >\r\n                                Forgot password?\r\n                            </a>\r\n                            <span\r\n                                className=\"text-black-1 text-sm h-auto py-0 relative\"\r\n                                style={{ top: '-7px' }}\r\n                            >\r\n                                {\"Don't have an account? \"}\r\n                                <a\r\n                                    className=\"font-medium text-blue-900 hover:text-info\"\r\n                                    href=\"#\"\r\n                                    onClick={(e) => {\r\n                                        e.preventDefault()\r\n\r\n                                        history.push(SignInPath)\r\n                                    }}\r\n                                >\r\n                                    Sign up\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n            {!showError && <div className=\"h-40px mb-5\"></div>}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nLogin.propTypes = {}\r\n\r\nexport default Login\r\n","import * as Yup from 'yup'\r\nimport validator from 'validator'\r\n\r\nexport const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\r\n\r\nconst FILE_SIZE = 100 * 1024\r\n\r\nexport const regex = {\r\n    alpha: /^[A-Za-z]+$/,\r\n    alphaNumeric: /[a-zA-Z0-9]/,\r\n    atLeastOneUpperCase: /[A-Z]/,\r\n    phoneNumber:\r\n        /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\r\n    exact5: /^[0-9]{5}$/,\r\n}\r\n\r\nexport const validations = {\r\n    password: Yup.string()\r\n        .min(8, 'Too Short!')\r\n        .max(64, 'Too Long!')\r\n        .matches(\r\n            regex.atLeastOneUpperCase,\r\n            'Must contain al least one uppercase letter.'\r\n        )\r\n        .required('Required'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n        .required('Required'),\r\n    userName: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(64, 'Too Long!')\r\n        .test(\r\n            'alphaNumeric',\r\n            'Must contain only letters and numbers.',\r\n            (value) => value && validator.isAlphanumeric(value)\r\n        )\r\n        .required('Required'),\r\n    walletAddress: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(64, 'Too Long!')\r\n        .test(\r\n            'alphaNumeric',\r\n            'Must be a valid wallet address.',\r\n            (value) => value && validator.isEthereumAddress(value)\r\n        )\r\n        .required('Required'),\r\n    mail: Yup.string()\r\n        .max(64, 'Too Long!')\r\n        .lowercase('Must contain only lower case')\r\n        .email('Must be a valid email format. example@email.com')\r\n        .required('Required'),\r\n    phone: Yup.string()\r\n        .matches(regex.phoneNumber, 'Must be a valid phone number.')\r\n        .required('Required'),\r\n    name: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(30, 'Too Long!')\r\n        .test(\r\n            'alpha',\r\n            'Must contain only letters.',\r\n            (value) =>\r\n                !value || (value && validator.isAlpha(value.replace(' ', '')))\r\n        ),\r\n    // .required('Required'),\r\n    birthDate: Yup.date().required('Required'),\r\n    country: Yup.string().required('Required'),\r\n    state: Yup.string().required('Required'),\r\n    city: Yup.string().required('Required'),\r\n    line: Yup.string().required('Required'),\r\n    postalCode: Yup.string()\r\n        .matches(regex.exact5, 'Must be exactly 5 digits')\r\n        .required('Required'),\r\n    file: Yup.mixed()\r\n        .required('A file is required')\r\n        .test(\r\n            'fileSize',\r\n            'File too large',\r\n            (value) => value && value[0].size <= FILE_SIZE\r\n        )\r\n        .test(\r\n            'fileFormat',\r\n            'Unsupported Format',\r\n            (value) => value && SUPPORTED_FORMATS.includes(value[0].type)\r\n        )\r\n        .required('Required'),\r\n    min20Usd: Yup.mixed()\r\n        .required('Required')\r\n        .test('usdAmount', 'Minimum to invest is 20 USD', (value) => {\r\n            if (value) {\r\n                let _v = value\r\n                _v = _v.replace(/\\D/g, '')\r\n                _v = parseFloat(_v)\r\n                return _v >= 20.0\r\n            }\r\n            return false\r\n        }),\r\n    no0Usd: Yup.mixed()\r\n        .required('Required')\r\n        .test('usdAmount', 'Usd amount must be higher than 0', (value) => {\r\n            if (value) {\r\n                let _v = value\r\n                _v = parseFloat(_v)\r\n                return _v > 0.0\r\n            }\r\n            return false\r\n        }),\r\n    generic: Yup.string().max(64, 'Too Long!').required('Required'),\r\n    boolean: Yup.bool().oneOf([true], 'Field must be checked'),\r\n    onlyNumber: Yup.mixed()\r\n        .required('Required')\r\n        .test('onlyNumber', 'Field must be a number', (value) => {\r\n            if (value) {\r\n                const _v = value\r\n                const isnum = /^\\d+$/.test(_v)\r\n\r\n                return isnum\r\n            }\r\n            return false\r\n        }),\r\n    isColor: Yup.mixed()\r\n        .required('Required')\r\n        .test(\r\n            'color',\r\n            'Field must be a valid color format. Examples. RGBA: rgba(0, 0, 0, 1), HEXA: #000000, RGB: rgb(0,0,0), Color: red',\r\n            (value) => {\r\n                if (value) {\r\n                    const s = new Option().style\r\n                    s.color = value\r\n                    return s.color !== ''\r\n                }\r\n                return false\r\n            }\r\n        ),\r\n    number: Yup.number().required('Required'),\r\n    array: Yup.array().required('Required'),\r\n    validateIsNotCurrentUser: (currentUser, currentMembers) => {\r\n        return Yup.mixed()\r\n            .required('Required')\r\n            .test('validUserName', 'You can not add yourself', (value) => {\r\n                if (value) {\r\n                    if (\r\n                        value === currentUser.userName ||\r\n                        value === currentUser.userMail\r\n                    )\r\n                        return false\r\n                    return true\r\n                }\r\n                return false\r\n            })\r\n            .test(\r\n                'validateIsNotExistingMember',\r\n                'You can not add existing members',\r\n                (value) => {\r\n                    if (value) {\r\n                        let valid = true\r\n\r\n                        for (\r\n                            let index = 0;\r\n                            index < currentMembers.length;\r\n                            index++\r\n                        ) {\r\n                            const { userName, userMail } = currentMembers[index]\r\n                            if (value === userName || value === userMail) {\r\n                                valid = false\r\n                                break\r\n                            }\r\n                        }\r\n                        return valid\r\n                    }\r\n                    return false\r\n                }\r\n            )\r\n    },\r\n}\r\n","/* eslint-disable react/display-name */\r\nimport React from 'react'\r\nimport { DatePicker, Form, Input, TimePicker, Select } from 'antd'\r\n\r\nconst FormItem = Form.Item\r\nconst { Option } = Select\r\n\r\nconst CreateAntField =\r\n    (AntComponent) =>\r\n    ({\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        defaultSelected,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }) => {\r\n        const touched = form.touched[field.name]\r\n        const submitted = submitCount > 0\r\n        const hasError = form.errors[field.name]\r\n        const submittedError = hasError && submitted\r\n        const touchedError = hasError && touched\r\n        const onInputChange = ({ target: { value } }) =>\r\n            form.setFieldValue(field.name, value)\r\n        const onChange = (value) => form.setFieldValue(field.name, value)\r\n        const onBlur = () => form.setFieldTouched(field.name, true)\r\n\r\n        return (\r\n            <FormItem\r\n                label={label}\r\n                hasFeedback={\r\n                    (hasFeedback && submitted) || (hasFeedback && touched)\r\n                }\r\n                help={submittedError || touchedError ? hasError : false}\r\n                validateStatus={\r\n                    submittedError || touchedError ? 'error' : 'success'\r\n                }\r\n            >\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((name) => (\r\n                            <Option key={name}>{name}</Option>\r\n                        ))}\r\n                </AntComponent>\r\n            </FormItem>\r\n        )\r\n    }\r\n\r\nexport const AntSelect = CreateAntField(Select)\r\nexport const AntDatePicker = CreateAntField(DatePicker)\r\nexport const AntInput = CreateAntField(Input)\r\nexport const AntInputPassword = CreateAntField(Input.Password)\r\nexport const AntTimePicker = CreateAntField(TimePicker)\r\n"],"sourceRoot":""}