{"version":3,"sources":["constants/countrys.js","constants/language.js","views/AuthView/Forms/SignUp.js","services/yupValidations.js","components/CreateAntField/index.js"],"names":["countrys","availableLangues","schema","Yup","firstName","validations","name","lastName","email","mail","country","generic","language","password","confirmPassword","passwordConfirmation","initialValues","userName","SigUp","onSubmit","showError","errorMessage","history","disabled","walletAddress","useHistory","Fragment","className","validationSchema","values","isSubmitting","component","AntInput","type","placeholder","hasFeedback","value","toLowerCase","AntSelect","showSearch","selectOptions","AntInputPassword","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","message","showIcon","Item","block","htmlType","loading","style","paddingTop","paddingBottom","top","href","onClick","e","preventDefault","push","LoginInPath","SUPPORTED_FORMATS","regex","min","max","matches","required","oneOf","test","validator","isAlphanumeric","isEthereumAddress","lowercase","phone","isAlpha","replace","birthDate","state","city","line","postalCode","file","size","includes","min20Usd","_v","parseFloat","no0Usd","boolean","onlyNumber","isColor","s","Option","color","number","array","validateIsNotCurrentUser","currentUser","currentMembers","userMail","valid","index","length","FormItem","Form","Select","CreateAntField","AntComponent","field","form","label","defaultSelected","submitCount","props","touched","submitted","hasError","errors","submittedError","touchedError","help","validateStatus","onBlur","setFieldTouched","onChange","target","setFieldValue","map","DatePicker","Input","Password","TimePicker"],"mappings":"2NAAaA,EAAW,CACpB,cACA,gBACA,UACA,UACA,iBACA,UACA,SACA,WACA,aACA,sBACA,YACA,UACA,QACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,UACA,SACA,UACA,UACA,yBACA,WACA,gBACA,SACA,iCACA,oBACA,WACA,eACA,UACA,WACA,WACA,SACA,aACA,iBACA,2BACA,OACA,QACA,QACA,mBACA,0BACA,WACA,UACA,QACA,eACA,aACA,qBACA,UACA,SACA,iBACA,mCACA,UACA,WACA,WACA,qBACA,aACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,8BACA,gBACA,iCACA,OACA,UACA,SACA,gBACA,mBACA,8BACA,QACA,SACA,UACA,UACA,QACA,YACA,qBACA,SACA,YACA,UACA,aACA,OACA,YACA,SACA,gBACA,SACA,QACA,oCACA,WACA,YACA,UACA,UACA,QACA,YACA,OACA,UACA,SACA,QACA,cACA,UACA,QACA,SACA,aACA,QACA,WACA,gBACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,QACA,YACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,aACA,YACA,UACA,SACA,UACA,SACA,WACA,aACA,aACA,UACA,aACA,UACA,UACA,QACA,QACA,cACA,uBACA,gBACA,cACA,YACA,QACA,UACA,OACA,iBACA,2BACA,SACA,OACA,WACA,QACA,wBACA,SACA,mBACA,WACA,OACA,cACA,WACA,SACA,WACA,cACA,QACA,UACA,UACA,qBACA,SACA,qCACA,mBACA,eACA,wBACA,cACA,4BACA,mCACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,eACA,WACA,WACA,kBACA,UACA,eACA,QACA,YACA,WACA,yBACA,YACA,SACA,cACA,SACA,aACA,WACA,WACA,cACA,OACA,UACA,QACA,sBACA,UACA,SACA,eACA,2BACA,SACA,SACA,uBACA,iBACA,gBACA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","file":"static/js/10.514b8add.chunk.js","sourcesContent":["export const countrys = [\n    'Afghanistan',\n    'Aland Islands',\n    'Albania',\n    'Algeria',\n    'American Samoa',\n    'Andorra',\n    'Angola',\n    'Anguilla',\n    'Antarctica',\n    'Antigua and Barbuda',\n    'Argentina',\n    'Armenia',\n    'Aruba',\n    'Australia',\n    'Austria',\n    'Azerbaijan',\n    'Bahamas',\n    'Bahrain',\n    'Bangladesh',\n    'Barbados',\n    'Belarus',\n    'Belgium',\n    'Belize',\n    'Benin',\n    'Bermuda',\n    'Bhutan',\n    'Bolivia',\n    'Bonaire',\n    'Bosnia and Herzegovina',\n    'Botswana',\n    'Bouvet Island',\n    'Brazil',\n    'British Indian Ocean Territory',\n    'Brunei Darussalam',\n    'Bulgaria',\n    'Burkina Faso',\n    'Burundi',\n    'Cambodia',\n    'Cameroon',\n    'Canada',\n    'Cape Verde',\n    'Cayman Islands',\n    'Central African Republic',\n    'Chad',\n    'Chile',\n    'China',\n    'Christmas Island',\n    'Cocos (Keeling) Islands',\n    'Colombia',\n    'Comoros',\n    'Congo',\n    'Cook Islands',\n    'Costa Rica',\n    'Croatia (Hrvatska)',\n    'Curacao',\n    'Cyprus',\n    'Czech Republic',\n    'Democratic Republic of the Congo',\n    'Denmark',\n    'Djibouti',\n    'Dominica',\n    'Dominican Republic',\n    'East Timor',\n    'Ecuador',\n    'Egypt',\n    'El Salvador',\n    'Equatorial Guinea',\n    'Eritrea',\n    'Estonia',\n    'Ethiopia',\n    'Falkland Islands (Malvinas)',\n    'Faroe Islands',\n    'Federated States of Micronesia',\n    'Fiji',\n    'Finland',\n    'France',\n    'French Guiana',\n    'French Polynesia',\n    'French Southern Territories',\n    'Gabon',\n    'Gambia',\n    'Georgia',\n    'Germany',\n    'Ghana',\n    'Gibraltar',\n    'Great Britain (UK)',\n    'Greece',\n    'Greenland',\n    'Grenada',\n    'Guadeloupe',\n    'Guam',\n    'Guatemala',\n    'Guinea',\n    'Guinea-Bissau',\n    'Guyana',\n    'Haiti',\n    'Heard Island and McDonald Islands',\n    'Honduras',\n    'Hong Kong',\n    'Hungary',\n    'Iceland',\n    'India',\n    'Indonesia',\n    'Iraq',\n    'Ireland',\n    'Israel',\n    'Italy',\n    'Ivory Coast',\n    'Jamaica',\n    'Japan',\n    'Jordan',\n    'Kazakhstan',\n    'Kenya',\n    'Kiribati',\n    'Korea (South)',\n    'Kuwait',\n    'Kyrgyzstan',\n    'Laos',\n    'Latvia',\n    'Lebanon',\n    'Lesotho',\n    'Liberia',\n    'Libya',\n    'Liechtenstein',\n    'Lithuania',\n    'Luxembourg',\n    'Macau',\n    'Macedonia',\n    'Madagascar',\n    'Malawi',\n    'Malaysia',\n    'Maldives',\n    'Mali',\n    'Malta',\n    'Marshall Islands',\n    'Martinique',\n    'Mauritania',\n    'Mauritius',\n    'Mayotte',\n    'Mexico',\n    'Moldova',\n    'Monaco',\n    'Mongolia',\n    'Montenegro',\n    'Montserrat',\n    'Morocco',\n    'Mozambique',\n    'Myanmar',\n    'Namibia',\n    'Nauru',\n    'Nepal',\n    'Netherlands',\n    'Netherlands Antilles',\n    'New Caledonia',\n    'New Zealand',\n    'Nicaragua',\n    'Niger',\n    'Nigeria',\n    'Niue',\n    'Norfolk Island',\n    'Northern Mariana Islands',\n    'Norway',\n    'Oman',\n    'Pakistan',\n    'Palau',\n    'Palestinian Territory',\n    'Panama',\n    'Papua New Guinea',\n    'Paraguay',\n    'Peru',\n    'Philippines',\n    'Pitcairn',\n    'Poland',\n    'Portugal',\n    'Puerto Rico',\n    'Qatar',\n    'Reunion',\n    'Romania',\n    'Russian Federation',\n    'Rwanda',\n    'S. Georgia and S. Sandwich Islands',\n    'Saint Barthelemy',\n    'Saint Helena',\n    'Saint Kitts and Nevis',\n    'Saint Lucia',\n    'Saint Pierre and Miquelon',\n    'Saint Vincent and the Grenadines',\n    'Samoa',\n    'San Marino',\n    'Sao Tome and Principe',\n    'Saudi Arabia',\n    'Senegal',\n    'Serbia',\n    'Seychelles',\n    'Sierra Leone',\n    'Singapore',\n    'Sint Maarten',\n    'Slovakia',\n    'Slovenia',\n    'Solomon Islands',\n    'Somalia',\n    'South Africa',\n    'Spain',\n    'Sri Lanka',\n    'Suriname',\n    'Svalbard and Jan Mayen',\n    'Swaziland',\n    'Sweden',\n    'Switzerland',\n    'Taiwan',\n    'Tajikistan',\n    'Tanzania',\n    'Thailand',\n    'Timor-Leste',\n    'Togo',\n    'Tokelau',\n    'Tonga',\n    'Trinidad and Tobago',\n    'Tunisia',\n    'Turkey',\n    'Turkmenistan',\n    'Turks and Caicos Islands',\n    'Tuvalu',\n    'Uganda',\n    'United Arab Emirates',\n    'United Kingdom',\n    'United States',\n    'United States Minor Outlying Islands',\n    'Uruguay',\n    'USSR (former)',\n    'Uzbekistan',\n    'Vanuatu',\n    'Vatican City State (Holy See)',\n    'Venezuela',\n    'Vietnam',\n    'Virgin Islands (British)',\n    'Virgin Islands (U.S.)',\n    'Wallis and Futuna',\n    'Western Sahara',\n    'Yemen',\n    'Yugoslavia (former)',\n    'Zaire (former)',\n    'Zambia',\n    'Zimbabwe',\n]\n","export const availableLangues = [\n    'English',\n    'Spanish',\n    'French',\n    'Portugu',\n    'Italian',\n    'Mandarin',\n]\n","import React from 'react'\nimport { Formik, Form, Field } from 'formik'\nimport { Button, Form as FormAnt, Alert } from 'antd'\nimport * as Yup from 'yup'\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons'\nimport { validations } from '../../../services/yupValidations'\nimport { useHistory } from 'react-router'\n\nimport { LoginInPath } from '../../../constants/routerConstants'\nimport { countrys } from './../../../constants/countrys'\nimport { availableLangues } from './../../../constants/language'\n\nimport {\n    AntInput,\n    AntInputPassword,\n    AntSelect,\n} from '../../../components/CreateAntField/index'\n\nconst schema = Yup.object({\n    firstName: validations.name,\n    lastName: validations.name,\n    email: validations.mail,\n    country: validations.generic,\n    language: validations.generic,\n    password: validations.password,\n    confirmPassword: validations.passwordConfirmation,\n})\n\nconst initialValues = {\n    firstName: '',\n    lastName: '',\n    userName: '',\n    email: '',\n    // country: null,\n    password: '',\n    confirmPassword: '',\n}\n\nconst SigUp = ({\n    onSubmit,\n    showError,\n    errorMessage,\n    disabled,\n    walletAddress,\n}) => {\n    const history = useHistory()\n\n    return (\n        <React.Fragment>\n            <div className=\"font-medium mb-2\">Sign up</div>\n            <Formik\n                validationSchema={schema}\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n            >\n                {({ values, isSubmitting }) => (\n                    <Form className=\"mb-4\">\n                        <div className=\"flex flex-row space-x-2\">\n                            <Field\n                                component={AntInput}\n                                type=\"text\"\n                                name=\"firstName\"\n                                placeholder=\"* First Name\"\n                                className=\"h-12 rounded-lg\"\n                                hasFeedback\n                                value={values?.firstName}\n                            />\n                            <Field\n                                component={AntInput}\n                                type=\"text\"\n                                name=\"lastName\"\n                                placeholder=\"* Last Name\"\n                                className=\"h-12 rounded-lg\"\n                                hasFeedback\n                                value={values?.lastName}\n                            />\n                        </div>\n                        <Field\n                            component={AntInput}\n                            name=\"email\"\n                            type=\"email\"\n                            placeholder=\"Email\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            value={values?.email.toLowerCase()}\n                        />\n                        <Field\n                            component={AntSelect}\n                            name=\"country\"\n                            showSearch\n                            // type=\"email\"\n                            placeholder=\"Country of Residence\"\n                            className=\"h-12 rounded-lg custom-ant-select\"\n                            selectOptions={countrys}\n                            // hasFeedback\n                            value={values?.country}\n                        />\n                        <Field\n                            component={AntSelect}\n                            name=\"language\"\n                            showSearch\n                            // type=\"email\"\n                            placeholder=\"Preferred Language\"\n                            className=\"h-12 rounded-lg custom-ant-select\"\n                            selectOptions={availableLangues}\n                            // hasFeedback\n                            value={values?.language}\n                        />\n                        {/* <Field\n                            component={AntInput}\n                            type=\"text\"\n                            name=\"userName\"\n                            placeholder=\"Username\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            value={values?.userName}\n                        /> */}\n                        <Field\n                            component={AntInputPassword}\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            iconRender={(visible) =>\n                                visible ? (\n                                    <EyeTwoTone />\n                                ) : (\n                                    <EyeInvisibleOutlined />\n                                )\n                            }\n                            value={values?.password}\n                        />\n                        <Field\n                            component={AntInputPassword}\n                            name=\"confirmPassword\"\n                            type=\"password\"\n                            placeholder=\"Confirm Password\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            iconRender={(visible) =>\n                                visible ? (\n                                    <EyeTwoTone />\n                                ) : (\n                                    <EyeInvisibleOutlined />\n                                )\n                            }\n                            value={values?.confirmPassword}\n                        />\n                        {showError && (\n                            <Alert\n                                className=\"mb-5\"\n                                message={errorMessage}\n                                type=\"error\"\n                                showIcon\n                            />\n                        )}\n\n                        <FormAnt.Item className=\"mb-0\">\n                            <Button\n                                type=\"primary\"\n                                block\n                                className=\"text-sm px-4 py-2 py h-12 rounded-full font-medium\"\n                                htmlType=\"submit\"\n                                loading={isSubmitting}\n                                style={{\n                                    paddingTop: '9px',\n                                    paddingBottom: '9px',\n                                }}\n                            >\n                                Register\n                            </Button>\n                        </FormAnt.Item>\n                    </Form>\n                )}\n            </Formik>\n\n            <div className=\"login-links text-center\">\n                <span\n                    className=\"text-black-1 text-sm h-auto py-0 relative\"\n                    style={{ top: '-7px' }}\n                >\n                    Already have an account.\n                    <a\n                        className=\"font-medium text-blue-200 hover:text-info\"\n                        href=\"#\"\n                        onClick={(e) => {\n                            e.preventDefault()\n\n                            history.push(LoginInPath)\n                        }}\n                    >\n                        {' '}\n                        Log in\n                    </a>\n                </span>\n            </div>\n            {!showError && <div className=\"h-40px mb-5\"></div>}\n        </React.Fragment>\n    )\n}\n\nSigUp.propTypes = {}\n\nexport default SigUp\n","import * as Yup from 'yup'\nimport validator from 'validator'\n\nexport const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\n\nconst FILE_SIZE = 100 * 1024\n\nexport const regex = {\n    alpha: /^[A-Za-z]+$/,\n    alphaNumeric: /[a-zA-Z0-9]/,\n    atLeastOneUpperCase: /[A-Z]/,\n    phoneNumber:\n        /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\n    exact5: /^[0-9]{5}$/,\n}\n\nexport const validations = {\n    password: Yup.string()\n        .min(8, 'Too Short!')\n        .max(64, 'Too Long!')\n        .matches(\n            regex.atLeastOneUpperCase,\n            'Must contain al least one uppercase letter.'\n        )\n        .required('Required'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required('Required'),\n    userName: Yup.string()\n        .min(3, 'Too Short!')\n        .max(64, 'Too Long!')\n        .test(\n            'alphaNumeric',\n            'Must contain only letters and numbers.',\n            (value) => value && validator.isAlphanumeric(value)\n        )\n        .required('Required'),\n    walletAddress: Yup.string()\n        .min(3, 'Too Short!')\n        .max(64, 'Too Long!')\n        .test(\n            'alphaNumeric',\n            'Must be a valid wallet address.',\n            (value) => value && validator.isEthereumAddress(value)\n        )\n        .required('Required'),\n    mail: Yup.string()\n        .max(64, 'Too Long!')\n        .lowercase('Must contain only lower case')\n        .email('Must be a valid email format. example@email.com')\n        .required('Required'),\n    phone: Yup.string()\n        .matches(regex.phoneNumber, 'Must be a valid phone number.')\n        .required('Required'),\n    name: Yup.string()\n        .min(3, 'Too Short!')\n        .max(30, 'Too Long!')\n        .test(\n            'alpha',\n            'Must contain only letters.',\n            (value) =>\n                !value || (value && validator.isAlpha(value.replace(' ', '')))\n        ),\n    // .required('Required'),\n    birthDate: Yup.date().required('Required'),\n    country: Yup.string().required('Required'),\n    state: Yup.string().required('Required'),\n    city: Yup.string().required('Required'),\n    line: Yup.string().required('Required'),\n    postalCode: Yup.string()\n        .matches(regex.exact5, 'Must be exactly 5 digits')\n        .required('Required'),\n    file: Yup.mixed()\n        .required('A file is required')\n        .test(\n            'fileSize',\n            'File too large',\n            (value) => value && value[0].size <= FILE_SIZE\n        )\n        .test(\n            'fileFormat',\n            'Unsupported Format',\n            (value) => value && SUPPORTED_FORMATS.includes(value[0].type)\n        )\n        .required('Required'),\n    min20Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Minimum to invest is 20 USD', (value) => {\n            if (value) {\n                let _v = value\n                _v = _v.replace(/\\D/g, '')\n                _v = parseFloat(_v)\n                return _v >= 20.0\n            }\n            return false\n        }),\n    no0Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Usd amount must be higher than 0', (value) => {\n            if (value) {\n                let _v = value\n                _v = parseFloat(_v)\n                return _v > 0.0\n            }\n            return false\n        }),\n    generic: Yup.string().max(64, 'Too Long!').required('Required'),\n    boolean: Yup.bool().oneOf([true], 'Field must be checked'),\n    onlyNumber: Yup.mixed()\n        .required('Required')\n        .test('onlyNumber', 'Field must be a number', (value) => {\n            if (value) {\n                const _v = value\n                const isnum = /^\\d+$/.test(_v)\n\n                return isnum\n            }\n            return false\n        }),\n    isColor: Yup.mixed()\n        .required('Required')\n        .test(\n            'color',\n            'Field must be a valid color format. Examples. RGBA: rgba(0, 0, 0, 1), HEXA: #000000, RGB: rgb(0,0,0), Color: red',\n            (value) => {\n                if (value) {\n                    const s = new Option().style\n                    s.color = value\n                    return s.color !== ''\n                }\n                return false\n            }\n        ),\n    number: Yup.number().required('Required'),\n    array: Yup.array().required('Required'),\n    validateIsNotCurrentUser: (currentUser, currentMembers) => {\n        return Yup.mixed()\n            .required('Required')\n            .test('validUserName', 'You can not add yourself', (value) => {\n                if (value) {\n                    if (\n                        value === currentUser.userName ||\n                        value === currentUser.userMail\n                    )\n                        return false\n                    return true\n                }\n                return false\n            })\n            .test(\n                'validateIsNotExistingMember',\n                'You can not add existing members',\n                (value) => {\n                    if (value) {\n                        let valid = true\n\n                        for (\n                            let index = 0;\n                            index < currentMembers.length;\n                            index++\n                        ) {\n                            const { userName, userMail } = currentMembers[index]\n                            if (value === userName || value === userMail) {\n                                valid = false\n                                break\n                            }\n                        }\n                        return valid\n                    }\n                    return false\n                }\n            )\n    },\n}\n","/* eslint-disable react/display-name */\nimport React from 'react'\nimport { DatePicker, Form, Input, TimePicker, Select } from 'antd'\n\nconst FormItem = Form.Item\nconst { Option } = Select\n\nconst CreateAntField =\n    (AntComponent) =>\n    ({\n        field,\n        form,\n        hasFeedback,\n        label,\n        defaultSelected,\n        selectOptions,\n        submitCount,\n        type,\n        ...props\n    }) => {\n        const touched = form.touched[field.name]\n        const submitted = submitCount > 0\n        const hasError = form.errors[field.name]\n        const submittedError = hasError && submitted\n        const touchedError = hasError && touched\n        const onInputChange = ({ target: { value } }) =>\n            form.setFieldValue(field.name, value)\n        const onChange = (value) => form.setFieldValue(field.name, value)\n        const onBlur = () => form.setFieldTouched(field.name, true)\n\n        return (\n            <FormItem\n                label={label}\n                hasFeedback={\n                    (hasFeedback && submitted) || (hasFeedback && touched)\n                }\n                help={submittedError || touchedError ? hasError : false}\n                validateStatus={\n                    submittedError || touchedError ? 'error' : 'success'\n                }\n            >\n                <AntComponent\n                    {...field}\n                    {...props}\n                    onBlur={onBlur}\n                    onChange={type ? onInputChange : onChange}\n                >\n                    {selectOptions &&\n                        selectOptions.map((name) => (\n                            <Option key={name}>{name}</Option>\n                        ))}\n                </AntComponent>\n            </FormItem>\n        )\n    }\n\nexport const AntSelect = CreateAntField(Select)\nexport const AntDatePicker = CreateAntField(DatePicker)\nexport const AntInput = CreateAntField(Input)\nexport const AntInputPassword = CreateAntField(Input.Password)\nexport const AntTimePicker = CreateAntField(TimePicker)\n"],"sourceRoot":""}