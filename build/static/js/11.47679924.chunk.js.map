{"version":3,"sources":["views/AuthView/Forms/Login.js","services/yupValidations.js","components/CreateAntField/index.js"],"names":["schema","Yup","emailOrUsername","validations","mail","password","generic","initialValues","Login","onSubmit","showError","errorMessage","history","useHistory","Fragment","className","validationSchema","isSubmitting","values","component","AntInput","name","type","placeholder","hasFeedback","value","toLowerCase","AntInputPassword","iconRender","visible","message","showIcon","Item","block","htmlType","loading","style","paddingTop","paddingBottom","top","href","onClick","e","preventDefault","push","SignInPath","SUPPORTED_FORMATS","regex","min","max","matches","required","passwordConfirmation","oneOf","userName","test","validator","isAlphanumeric","walletAddress","isEthereumAddress","lowercase","email","phone","isAlpha","replace","birthDate","country","state","city","line","postalCode","file","size","includes","min20Usd","_v","parseFloat","no0Usd","boolean","onlyNumber","isColor","s","Option","color","number","array","validateIsNotCurrentUser","currentUser","currentMembers","userMail","valid","index","length","FormItem","Form","Select","CreateAntField","AntComponent","field","form","label","selectOptions","defaultSelected","submitCount","props","touched","submitted","hasError","errors","submittedError","touchedError","help","validateStatus","onBlur","setFieldTouched","onChange","target","setFieldValue","map","AntSelect","DatePicker","Input","Password","TimePicker"],"mappings":"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","file":"static/js/11.47679924.chunk.js","sourcesContent":["import React from 'react'\nimport { Formik, Form, Field } from 'formik'\nimport { Button, Form as FormAnt, Alert } from 'antd'\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons'\nimport * as Yup from 'yup'\nimport { useHistory } from 'react-router'\nimport { validations } from './../../../services/yupValidations'\nimport {\n    AntInput,\n    AntInputPassword,\n} from './../../../components/CreateAntField/index'\nimport { SignInPath } from '../../../constants/routerConstants'\n\nconst schema = Yup.object({\n    emailOrUsername: validations.mail,\n    password: validations.generic,\n})\n\nconst initialValues = {\n    emailOrUsername: '',\n    password: '',\n}\n\nconst Login = ({ onSubmit, showError, errorMessage }) => {\n    const history = useHistory()\n\n    return (\n        <React.Fragment>\n            <div className=\"font-medium mb-2\">Log in</div>\n            <Formik\n                validationSchema={schema}\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n            >\n                {({ isSubmitting, values }) => (\n                    <Form className=\"mb-4\">\n                        <Field\n                            component={AntInput}\n                            name=\"emailOrUsername\"\n                            type=\"email\"\n                            placeholder=\"Email\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            value={values?.emailOrUsername.toLowerCase()}\n                        />\n                        <Field\n                            component={AntInputPassword}\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            iconRender={(visible) =>\n                                visible ? (\n                                    <EyeTwoTone />\n                                ) : (\n                                    <EyeInvisibleOutlined />\n                                )\n                            }\n                            value={values?.password}\n                        />\n                        {showError && (\n                            <Alert\n                                className=\"mb-5\"\n                                message={errorMessage}\n                                type=\"error\"\n                                showIcon\n                            />\n                        )}\n                        <FormAnt.Item className=\"mb-0\">\n                            <Button\n                                block\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                className=\"text-sm px-4 py-2 py h-12 rounded-full font-medium\"\n                                // disabled={isSubmitting}\n                                loading={isSubmitting}\n                                style={{\n                                    paddingTop: '9px',\n                                    paddingBottom: '9px',\n                                }}\n                            >\n                                LOGIN\n                            </Button>\n                        </FormAnt.Item>\n                        <div className=\"login-links flex flex-col text-center\">\n                            <a\n                                type=\"link\"\n                                className=\"text-sm h-auto py-0 text-black-1 hover:text-info\"\n                            >\n                                Forgot password?\n                            </a>\n                            <span\n                                className=\"text-black-1 text-sm h-auto py-0 relative\"\n                                style={{ top: '-7px' }}\n                            >\n                                {\"Don't have an account? \"}\n                                <a\n                                    className=\"font-medium text-blue-900 hover:text-info\"\n                                    href=\"#\"\n                                    onClick={(e) => {\n                                        e.preventDefault()\n\n                                        history.push(SignInPath)\n                                    }}\n                                >\n                                    Sign up\n                                </a>\n                            </span>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            {!showError && <div className=\"h-40px mb-5\"></div>}\n        </React.Fragment>\n    )\n}\n\nLogin.propTypes = {}\n\nexport default Login\n","import * as Yup from 'yup'\nimport validator from 'validator'\n\nexport const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\n\nconst FILE_SIZE = 100 * 1024\n\nexport const regex = {\n    alpha: /^[A-Za-z]+$/,\n    alphaNumeric: /[a-zA-Z0-9]/,\n    atLeastOneUpperCase: /[A-Z]/,\n    phoneNumber:\n        /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\n    exact5: /^[0-9]{5}$/,\n}\n\nexport const validations = {\n    password: Yup.string()\n        .min(8, 'Too Short!')\n        .max(64, 'Too Long!')\n        .matches(\n            regex.atLeastOneUpperCase,\n            'Must contain al least one uppercase letter.'\n        )\n        .required('Required'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required('Required'),\n    userName: Yup.string()\n        .min(3, 'Too Short!')\n        .max(64, 'Too Long!')\n        .test(\n            'alphaNumeric',\n            'Must contain only letters and numbers.',\n            (value) => value && validator.isAlphanumeric(value)\n        )\n        .required('Required'),\n    walletAddress: Yup.string()\n        .min(3, 'Too Short!')\n        .max(64, 'Too Long!')\n        .test(\n            'alphaNumeric',\n            'Must be a valid wallet address.',\n            (value) => value && validator.isEthereumAddress(value)\n        )\n        .required('Required'),\n    mail: Yup.string()\n        .max(64, 'Too Long!')\n        .lowercase('Must contain only lower case')\n        .email('Must be a valid email format. example@email.com')\n        .required('Required'),\n    phone: Yup.string()\n        .matches(regex.phoneNumber, 'Must be a valid phone number.')\n        .required('Required'),\n    name: Yup.string()\n        .min(3, 'Too Short!')\n        .max(30, 'Too Long!')\n        .test(\n            'alpha',\n            'Must contain only letters.',\n            (value) =>\n                !value || (value && validator.isAlpha(value.replace(' ', '')))\n        ),\n    // .required('Required'),\n    birthDate: Yup.date().required('Required'),\n    country: Yup.string().required('Required'),\n    state: Yup.string().required('Required'),\n    city: Yup.string().required('Required'),\n    line: Yup.string().required('Required'),\n    postalCode: Yup.string()\n        .matches(regex.exact5, 'Must be exactly 5 digits')\n        .required('Required'),\n    file: Yup.mixed()\n        .required('A file is required')\n        .test(\n            'fileSize',\n            'File too large',\n            (value) => value && value[0].size <= FILE_SIZE\n        )\n        .test(\n            'fileFormat',\n            'Unsupported Format',\n            (value) => value && SUPPORTED_FORMATS.includes(value[0].type)\n        )\n        .required('Required'),\n    min20Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Minimum to invest is 20 USD', (value) => {\n            if (value) {\n                let _v = value\n                _v = _v.replace(/\\D/g, '')\n                _v = parseFloat(_v)\n                return _v >= 20.0\n            }\n            return false\n        }),\n    no0Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Usd amount must be higher than 0', (value) => {\n            if (value) {\n                let _v = value\n                _v = parseFloat(_v)\n                return _v > 0.0\n            }\n            return false\n        }),\n    generic: Yup.string().max(64, 'Too Long!').required('Required'),\n    boolean: Yup.bool().oneOf([true], 'Field must be checked'),\n    onlyNumber: Yup.mixed()\n        .required('Required')\n        .test('onlyNumber', 'Field must be a number', (value) => {\n            if (value) {\n                const _v = value\n                const isnum = /^\\d+$/.test(_v)\n\n                return isnum\n            }\n            return false\n        }),\n    isColor: Yup.mixed()\n        .required('Required')\n        .test(\n            'color',\n            'Field must be a valid color format. Examples. RGBA: rgba(0, 0, 0, 1), HEXA: #000000, RGB: rgb(0,0,0), Color: red',\n            (value) => {\n                if (value) {\n                    const s = new Option().style\n                    s.color = value\n                    return s.color !== ''\n                }\n                return false\n            }\n        ),\n    number: Yup.number().required('Required'),\n    array: Yup.array().required('Required'),\n    validateIsNotCurrentUser: (currentUser, currentMembers) => {\n        return Yup.mixed()\n            .required('Required')\n            .test('validUserName', 'You can not add yourself', (value) => {\n                if (value) {\n                    if (\n                        value === currentUser.userName ||\n                        value === currentUser.userMail\n                    )\n                        return false\n                    return true\n                }\n                return false\n            })\n            .test(\n                'validateIsNotExistingMember',\n                'You can not add existing members',\n                (value) => {\n                    if (value) {\n                        let valid = true\n\n                        for (\n                            let index = 0;\n                            index < currentMembers.length;\n                            index++\n                        ) {\n                            const { userName, userMail } = currentMembers[index]\n                            if (value === userName || value === userMail) {\n                                valid = false\n                                break\n                            }\n                        }\n                        return valid\n                    }\n                    return false\n                }\n            )\n    },\n}\n","/* eslint-disable react/display-name */\nimport React from 'react'\nimport { DatePicker, Form, Input, TimePicker, Select } from 'antd'\n\nconst FormItem = Form.Item\nconst { Option } = Select\n\nconst CreateAntField =\n    (AntComponent) =>\n    ({\n        field,\n        form,\n        hasFeedback,\n        label,\n        defaultSelected,\n        selectOptions,\n        submitCount,\n        type,\n        ...props\n    }) => {\n        const touched = form.touched[field.name]\n        const submitted = submitCount > 0\n        const hasError = form.errors[field.name]\n        const submittedError = hasError && submitted\n        const touchedError = hasError && touched\n        const onInputChange = ({ target: { value } }) =>\n            form.setFieldValue(field.name, value)\n        const onChange = (value) => form.setFieldValue(field.name, value)\n        const onBlur = () => form.setFieldTouched(field.name, true)\n\n        return (\n            <FormItem\n                label={label}\n                hasFeedback={\n                    (hasFeedback && submitted) || (hasFeedback && touched)\n                }\n                help={submittedError || touchedError ? hasError : false}\n                validateStatus={\n                    submittedError || touchedError ? 'error' : 'success'\n                }\n            >\n                <AntComponent\n                    {...field}\n                    {...props}\n                    onBlur={onBlur}\n                    onChange={type ? onInputChange : onChange}\n                >\n                    {selectOptions &&\n                        selectOptions.map((name) => (\n                            <Option key={name}>{name}</Option>\n                        ))}\n                </AntComponent>\n            </FormItem>\n        )\n    }\n\nexport const AntSelect = CreateAntField(Select)\nexport const AntDatePicker = CreateAntField(DatePicker)\nexport const AntInput = CreateAntField(Input)\nexport const AntInputPassword = CreateAntField(Input.Password)\nexport const AntTimePicker = CreateAntField(TimePicker)\n"],"sourceRoot":""}