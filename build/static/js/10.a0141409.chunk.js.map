{"version":3,"sources":["constants/countrys.js","constants/language.js","views/AuthView/Forms/SignUp.js","services/yupValidations.js","components/CreateAntField/index.js"],"names":["countrys","availableLangues","schema","Yup","firstName","validations","name","lastName","email","mail","country","generic","language","password","confirmPassword","passwordConfirmation","initialValues","userName","SigUp","onSubmit","showError","errorMessage","history","disabled","walletAddress","useHistory","Fragment","className","validationSchema","values","isSubmitting","component","AntInput","type","placeholder","hasFeedback","value","toLowerCase","AntSelect","showSearch","selectOptions","AntInputPassword","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","message","showIcon","Item","block","htmlType","loading","style","paddingTop","paddingBottom","top","href","onClick","e","preventDefault","push","LoginInPath","SUPPORTED_FORMATS","regex","min","max","matches","required","oneOf","test","validator","isAlphanumeric","isEthereumAddress","lowercase","phone","isAlpha","replace","birthDate","state","city","line","postalCode","file","size","includes","min20Usd","_v","parseFloat","no0Usd","boolean","onlyNumber","isColor","s","Option","color","number","array","validateIsNotCurrentUser","currentUser","currentMembers","userMail","valid","index","length","FormItem","Form","Select","CreateAntField","AntComponent","field","form","label","defaultSelected","submitCount","props","touched","submitted","hasError","errors","submittedError","touchedError","help","validateStatus","onBlur","setFieldTouched","onChange","target","setFieldValue","map","DatePicker","Input","Password","TimePicker"],"mappings":"2NAAaA,EAAW,CACpB,cACA,gBACA,UACA,UACA,iBACA,UACA,SACA,WACA,aACA,sBACA,YACA,UACA,QACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,UACA,SACA,UACA,UACA,yBACA,WACA,gBACA,SACA,iCACA,oBACA,WACA,eACA,UACA,WACA,WACA,SACA,aACA,iBACA,2BACA,OACA,QACA,QACA,mBACA,0BACA,WACA,UACA,QACA,eACA,aACA,qBACA,UACA,SACA,iBACA,mCACA,UACA,WACA,WACA,qBACA,aACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,8BACA,gBACA,iCACA,OACA,UACA,SACA,gBACA,mBACA,8BACA,QACA,SACA,UACA,UACA,QACA,YACA,qBACA,SACA,YACA,UACA,aACA,OACA,YACA,SACA,gBACA,SACA,QACA,oCACA,WACA,YACA,UACA,UACA,QACA,YACA,OACA,UACA,SACA,QACA,cACA,UACA,QACA,SACA,aACA,QACA,WACA,gBACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,QACA,YACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,aACA,YACA,UACA,SACA,UACA,SACA,WACA,aACA,aACA,UACA,aACA,UACA,UACA,QACA,QACA,cACA,uBACA,gBACA,cACA,YACA,QACA,UACA,OACA,iBACA,2BACA,SACA,OACA,WACA,QACA,wBACA,SACA,mBACA,WACA,OACA,cACA,WACA,SACA,WACA,cACA,QACA,UACA,UACA,qBACA,SACA,qCACA,mBACA,eACA,wBACA,cACA,4BACA,mCACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,eACA,WACA,WACA,kBACA,UACA,eACA,QACA,YACA,WACA,yBACA,YACA,SACA,cACA,SACA,aACA,WACA,WACA,cACA,OACA,UACA,QACA,sBACA,UACA,SACA,eACA,2BACA,SACA,SACA,uBACA,iBACA,gBACA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","file":"static/js/10.a0141409.chunk.js","sourcesContent":["export const countrys = [\r\n    'Afghanistan',\r\n    'Aland Islands',\r\n    'Albania',\r\n    'Algeria',\r\n    'American Samoa',\r\n    'Andorra',\r\n    'Angola',\r\n    'Anguilla',\r\n    'Antarctica',\r\n    'Antigua and Barbuda',\r\n    'Argentina',\r\n    'Armenia',\r\n    'Aruba',\r\n    'Australia',\r\n    'Austria',\r\n    'Azerbaijan',\r\n    'Bahamas',\r\n    'Bahrain',\r\n    'Bangladesh',\r\n    'Barbados',\r\n    'Belarus',\r\n    'Belgium',\r\n    'Belize',\r\n    'Benin',\r\n    'Bermuda',\r\n    'Bhutan',\r\n    'Bolivia',\r\n    'Bonaire',\r\n    'Bosnia and Herzegovina',\r\n    'Botswana',\r\n    'Bouvet Island',\r\n    'Brazil',\r\n    'British Indian Ocean Territory',\r\n    'Brunei Darussalam',\r\n    'Bulgaria',\r\n    'Burkina Faso',\r\n    'Burundi',\r\n    'Cambodia',\r\n    'Cameroon',\r\n    'Canada',\r\n    'Cape Verde',\r\n    'Cayman Islands',\r\n    'Central African Republic',\r\n    'Chad',\r\n    'Chile',\r\n    'China',\r\n    'Christmas Island',\r\n    'Cocos (Keeling) Islands',\r\n    'Colombia',\r\n    'Comoros',\r\n    'Congo',\r\n    'Cook Islands',\r\n    'Costa Rica',\r\n    'Croatia (Hrvatska)',\r\n    'Curacao',\r\n    'Cyprus',\r\n    'Czech Republic',\r\n    'Democratic Republic of the Congo',\r\n    'Denmark',\r\n    'Djibouti',\r\n    'Dominica',\r\n    'Dominican Republic',\r\n    'East Timor',\r\n    'Ecuador',\r\n    'Egypt',\r\n    'El Salvador',\r\n    'Equatorial Guinea',\r\n    'Eritrea',\r\n    'Estonia',\r\n    'Ethiopia',\r\n    'Falkland Islands (Malvinas)',\r\n    'Faroe Islands',\r\n    'Federated States of Micronesia',\r\n    'Fiji',\r\n    'Finland',\r\n    'France',\r\n    'French Guiana',\r\n    'French Polynesia',\r\n    'French Southern Territories',\r\n    'Gabon',\r\n    'Gambia',\r\n    'Georgia',\r\n    'Germany',\r\n    'Ghana',\r\n    'Gibraltar',\r\n    'Great Britain (UK)',\r\n    'Greece',\r\n    'Greenland',\r\n    'Grenada',\r\n    'Guadeloupe',\r\n    'Guam',\r\n    'Guatemala',\r\n    'Guinea',\r\n    'Guinea-Bissau',\r\n    'Guyana',\r\n    'Haiti',\r\n    'Heard Island and McDonald Islands',\r\n    'Honduras',\r\n    'Hong Kong',\r\n    'Hungary',\r\n    'Iceland',\r\n    'India',\r\n    'Indonesia',\r\n    'Iraq',\r\n    'Ireland',\r\n    'Israel',\r\n    'Italy',\r\n    'Ivory Coast',\r\n    'Jamaica',\r\n    'Japan',\r\n    'Jordan',\r\n    'Kazakhstan',\r\n    'Kenya',\r\n    'Kiribati',\r\n    'Korea (South)',\r\n    'Kuwait',\r\n    'Kyrgyzstan',\r\n    'Laos',\r\n    'Latvia',\r\n    'Lebanon',\r\n    'Lesotho',\r\n    'Liberia',\r\n    'Libya',\r\n    'Liechtenstein',\r\n    'Lithuania',\r\n    'Luxembourg',\r\n    'Macau',\r\n    'Macedonia',\r\n    'Madagascar',\r\n    'Malawi',\r\n    'Malaysia',\r\n    'Maldives',\r\n    'Mali',\r\n    'Malta',\r\n    'Marshall Islands',\r\n    'Martinique',\r\n    'Mauritania',\r\n    'Mauritius',\r\n    'Mayotte',\r\n    'Mexico',\r\n    'Moldova',\r\n    'Monaco',\r\n    'Mongolia',\r\n    'Montenegro',\r\n    'Montserrat',\r\n    'Morocco',\r\n    'Mozambique',\r\n    'Myanmar',\r\n    'Namibia',\r\n    'Nauru',\r\n    'Nepal',\r\n    'Netherlands',\r\n    'Netherlands Antilles',\r\n    'New Caledonia',\r\n    'New Zealand',\r\n    'Nicaragua',\r\n    'Niger',\r\n    'Nigeria',\r\n    'Niue',\r\n    'Norfolk Island',\r\n    'Northern Mariana Islands',\r\n    'Norway',\r\n    'Oman',\r\n    'Pakistan',\r\n    'Palau',\r\n    'Palestinian Territory',\r\n    'Panama',\r\n    'Papua New Guinea',\r\n    'Paraguay',\r\n    'Peru',\r\n    'Philippines',\r\n    'Pitcairn',\r\n    'Poland',\r\n    'Portugal',\r\n    'Puerto Rico',\r\n    'Qatar',\r\n    'Reunion',\r\n    'Romania',\r\n    'Russian Federation',\r\n    'Rwanda',\r\n    'S. Georgia and S. Sandwich Islands',\r\n    'Saint Barthelemy',\r\n    'Saint Helena',\r\n    'Saint Kitts and Nevis',\r\n    'Saint Lucia',\r\n    'Saint Pierre and Miquelon',\r\n    'Saint Vincent and the Grenadines',\r\n    'Samoa',\r\n    'San Marino',\r\n    'Sao Tome and Principe',\r\n    'Saudi Arabia',\r\n    'Senegal',\r\n    'Serbia',\r\n    'Seychelles',\r\n    'Sierra Leone',\r\n    'Singapore',\r\n    'Sint Maarten',\r\n    'Slovakia',\r\n    'Slovenia',\r\n    'Solomon Islands',\r\n    'Somalia',\r\n    'South Africa',\r\n    'Spain',\r\n    'Sri Lanka',\r\n    'Suriname',\r\n    'Svalbard and Jan Mayen',\r\n    'Swaziland',\r\n    'Sweden',\r\n    'Switzerland',\r\n    'Taiwan',\r\n    'Tajikistan',\r\n    'Tanzania',\r\n    'Thailand',\r\n    'Timor-Leste',\r\n    'Togo',\r\n    'Tokelau',\r\n    'Tonga',\r\n    'Trinidad and Tobago',\r\n    'Tunisia',\r\n    'Turkey',\r\n    'Turkmenistan',\r\n    'Turks and Caicos Islands',\r\n    'Tuvalu',\r\n    'Uganda',\r\n    'United Arab Emirates',\r\n    'United Kingdom',\r\n    'United States',\r\n    'United States Minor Outlying Islands',\r\n    'Uruguay',\r\n    'USSR (former)',\r\n    'Uzbekistan',\r\n    'Vanuatu',\r\n    'Vatican City State (Holy See)',\r\n    'Venezuela',\r\n    'Vietnam',\r\n    'Virgin Islands (British)',\r\n    'Virgin Islands (U.S.)',\r\n    'Wallis and Futuna',\r\n    'Western Sahara',\r\n    'Yemen',\r\n    'Yugoslavia (former)',\r\n    'Zaire (former)',\r\n    'Zambia',\r\n    'Zimbabwe',\r\n]\r\n","export const availableLangues = [\r\n    'English',\r\n    'Spanish',\r\n    'French',\r\n    'Portugu',\r\n    'Italian',\r\n    'Mandarin',\r\n]\r\n","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { Button, Form as FormAnt, Alert } from 'antd'\r\nimport * as Yup from 'yup'\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons'\r\nimport { validations } from '../../../services/yupValidations'\r\nimport { useHistory } from 'react-router'\r\n\r\nimport { LoginInPath } from '../../../constants/routerConstants'\r\nimport { countrys } from './../../../constants/countrys'\r\nimport { availableLangues } from './../../../constants/language'\r\n\r\nimport {\r\n    AntInput,\r\n    AntInputPassword,\r\n    AntSelect,\r\n} from '../../../components/CreateAntField/index'\r\n\r\nconst schema = Yup.object({\r\n    firstName: validations.name,\r\n    lastName: validations.name,\r\n    email: validations.mail,\r\n    country: validations.generic,\r\n    language: validations.generic,\r\n    password: validations.password,\r\n    confirmPassword: validations.passwordConfirmation,\r\n})\r\n\r\nconst initialValues = {\r\n    firstName: '',\r\n    lastName: '',\r\n    userName: '',\r\n    email: '',\r\n    // country: null,\r\n    password: '',\r\n    confirmPassword: '',\r\n}\r\n\r\nconst SigUp = ({\r\n    onSubmit,\r\n    showError,\r\n    errorMessage,\r\n    disabled,\r\n    walletAddress,\r\n}) => {\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"font-medium mb-2\">Sign up</div>\r\n            <Formik\r\n                validationSchema={schema}\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n            >\r\n                {({ values, isSubmitting }) => (\r\n                    <Form className=\"mb-4\">\r\n                        <div className=\"flex flex-row space-x-2\">\r\n                            <Field\r\n                                component={AntInput}\r\n                                type=\"text\"\r\n                                name=\"firstName\"\r\n                                placeholder=\"* First Name\"\r\n                                className=\"h-12 rounded-lg\"\r\n                                hasFeedback\r\n                                value={values?.firstName}\r\n                            />\r\n                            <Field\r\n                                component={AntInput}\r\n                                type=\"text\"\r\n                                name=\"lastName\"\r\n                                placeholder=\"* Last Name\"\r\n                                className=\"h-12 rounded-lg\"\r\n                                hasFeedback\r\n                                value={values?.lastName}\r\n                            />\r\n                        </div>\r\n                        <Field\r\n                            component={AntInput}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            placeholder=\"Email\"\r\n                            className=\"h-12 rounded-lg\"\r\n                            hasFeedback\r\n                            value={values?.email.toLowerCase()}\r\n                        />\r\n                        <Field\r\n                            component={AntSelect}\r\n                            name=\"country\"\r\n                            showSearch\r\n                            // type=\"email\"\r\n                            placeholder=\"Country of Residence\"\r\n                            className=\"h-12 rounded-lg custom-ant-select\"\r\n                            selectOptions={countrys}\r\n                            // hasFeedback\r\n                            value={values?.country}\r\n                        />\r\n                        <Field\r\n                            component={AntSelect}\r\n                            name=\"language\"\r\n                            showSearch\r\n                            // type=\"email\"\r\n                            placeholder=\"Preferred Language\"\r\n                            className=\"h-12 rounded-lg custom-ant-select\"\r\n                            selectOptions={availableLangues}\r\n                            // hasFeedback\r\n                            value={values?.language}\r\n                        />\r\n                        {/* <Field\r\n                            component={AntInput}\r\n                            type=\"text\"\r\n                            name=\"userName\"\r\n                            placeholder=\"Username\"\r\n                            className=\"h-12 rounded-lg\"\r\n                            hasFeedback\r\n                            value={values?.userName}\r\n                        /> */}\r\n                        <Field\r\n                            component={AntInputPassword}\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            className=\"h-12 rounded-lg\"\r\n                            hasFeedback\r\n                            iconRender={(visible) =>\r\n                                visible ? (\r\n                                    <EyeTwoTone />\r\n                                ) : (\r\n                                    <EyeInvisibleOutlined />\r\n                                )\r\n                            }\r\n                            value={values?.password}\r\n                        />\r\n                        <Field\r\n                            component={AntInputPassword}\r\n                            name=\"confirmPassword\"\r\n                            type=\"password\"\r\n                            placeholder=\"Confirm Password\"\r\n                            className=\"h-12 rounded-lg\"\r\n                            hasFeedback\r\n                            iconRender={(visible) =>\r\n                                visible ? (\r\n                                    <EyeTwoTone />\r\n                                ) : (\r\n                                    <EyeInvisibleOutlined />\r\n                                )\r\n                            }\r\n                            value={values?.confirmPassword}\r\n                        />\r\n                        {showError && (\r\n                            <Alert\r\n                                className=\"mb-5\"\r\n                                message={errorMessage}\r\n                                type=\"error\"\r\n                                showIcon\r\n                            />\r\n                        )}\r\n\r\n                        <FormAnt.Item className=\"mb-0\">\r\n                            <Button\r\n                                type=\"primary\"\r\n                                block\r\n                                className=\"text-sm px-4 py-2 py h-12 rounded-full font-medium\"\r\n                                htmlType=\"submit\"\r\n                                loading={isSubmitting}\r\n                                style={{\r\n                                    paddingTop: '9px',\r\n                                    paddingBottom: '9px',\r\n                                }}\r\n                            >\r\n                                Register\r\n                            </Button>\r\n                        </FormAnt.Item>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n            <div className=\"login-links text-center\">\r\n                <span\r\n                    className=\"text-black-1 text-sm h-auto py-0 relative\"\r\n                    style={{ top: '-7px' }}\r\n                >\r\n                    Already have an account.\r\n                    <a\r\n                        className=\"font-medium text-blue-200 hover:text-info\"\r\n                        href=\"#\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault()\r\n\r\n                            history.push(LoginInPath)\r\n                        }}\r\n                    >\r\n                        {' '}\r\n                        Log in\r\n                    </a>\r\n                </span>\r\n            </div>\r\n            {!showError && <div className=\"h-40px mb-5\"></div>}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nSigUp.propTypes = {}\r\n\r\nexport default SigUp\r\n","import * as Yup from 'yup'\r\nimport validator from 'validator'\r\n\r\nexport const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\r\n\r\nconst FILE_SIZE = 100 * 1024\r\n\r\nexport const regex = {\r\n    alpha: /^[A-Za-z]+$/,\r\n    alphaNumeric: /[a-zA-Z0-9]/,\r\n    atLeastOneUpperCase: /[A-Z]/,\r\n    phoneNumber:\r\n        /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\r\n    exact5: /^[0-9]{5}$/,\r\n}\r\n\r\nexport const validations = {\r\n    password: Yup.string()\r\n        .min(8, 'Too Short!')\r\n        .max(64, 'Too Long!')\r\n        .matches(\r\n            regex.atLeastOneUpperCase,\r\n            'Must contain al least one uppercase letter.'\r\n        )\r\n        .required('Required'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n        .required('Required'),\r\n    userName: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(64, 'Too Long!')\r\n        .test(\r\n            'alphaNumeric',\r\n            'Must contain only letters and numbers.',\r\n            (value) => value && validator.isAlphanumeric(value)\r\n        )\r\n        .required('Required'),\r\n    walletAddress: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(64, 'Too Long!')\r\n        .test(\r\n            'alphaNumeric',\r\n            'Must be a valid wallet address.',\r\n            (value) => value && validator.isEthereumAddress(value)\r\n        )\r\n        .required('Required'),\r\n    mail: Yup.string()\r\n        .max(64, 'Too Long!')\r\n        .lowercase('Must contain only lower case')\r\n        .email('Must be a valid email format. example@email.com')\r\n        .required('Required'),\r\n    phone: Yup.string()\r\n        .matches(regex.phoneNumber, 'Must be a valid phone number.')\r\n        .required('Required'),\r\n    name: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(30, 'Too Long!')\r\n        .test(\r\n            'alpha',\r\n            'Must contain only letters.',\r\n            (value) =>\r\n                !value || (value && validator.isAlpha(value.replace(' ', '')))\r\n        ),\r\n    // .required('Required'),\r\n    birthDate: Yup.date().required('Required'),\r\n    country: Yup.string().required('Required'),\r\n    state: Yup.string().required('Required'),\r\n    city: Yup.string().required('Required'),\r\n    line: Yup.string().required('Required'),\r\n    postalCode: Yup.string()\r\n        .matches(regex.exact5, 'Must be exactly 5 digits')\r\n        .required('Required'),\r\n    file: Yup.mixed()\r\n        .required('A file is required')\r\n        .test(\r\n            'fileSize',\r\n            'File too large',\r\n            (value) => value && value[0].size <= FILE_SIZE\r\n        )\r\n        .test(\r\n            'fileFormat',\r\n            'Unsupported Format',\r\n            (value) => value && SUPPORTED_FORMATS.includes(value[0].type)\r\n        )\r\n        .required('Required'),\r\n    min20Usd: Yup.mixed()\r\n        .required('Required')\r\n        .test('usdAmount', 'Minimum to invest is 20 USD', (value) => {\r\n            if (value) {\r\n                let _v = value\r\n                _v = _v.replace(/\\D/g, '')\r\n                _v = parseFloat(_v)\r\n                return _v >= 20.0\r\n            }\r\n            return false\r\n        }),\r\n    no0Usd: Yup.mixed()\r\n        .required('Required')\r\n        .test('usdAmount', 'Usd amount must be higher than 0', (value) => {\r\n            if (value) {\r\n                let _v = value\r\n                _v = parseFloat(_v)\r\n                return _v > 0.0\r\n            }\r\n            return false\r\n        }),\r\n    generic: Yup.string().max(64, 'Too Long!').required('Required'),\r\n    boolean: Yup.bool().oneOf([true], 'Field must be checked'),\r\n    onlyNumber: Yup.mixed()\r\n        .required('Required')\r\n        .test('onlyNumber', 'Field must be a number', (value) => {\r\n            if (value) {\r\n                const _v = value\r\n                const isnum = /^\\d+$/.test(_v)\r\n\r\n                return isnum\r\n            }\r\n            return false\r\n        }),\r\n    isColor: Yup.mixed()\r\n        .required('Required')\r\n        .test(\r\n            'color',\r\n            'Field must be a valid color format. Examples. RGBA: rgba(0, 0, 0, 1), HEXA: #000000, RGB: rgb(0,0,0), Color: red',\r\n            (value) => {\r\n                if (value) {\r\n                    const s = new Option().style\r\n                    s.color = value\r\n                    return s.color !== ''\r\n                }\r\n                return false\r\n            }\r\n        ),\r\n    number: Yup.number().required('Required'),\r\n    array: Yup.array().required('Required'),\r\n    validateIsNotCurrentUser: (currentUser, currentMembers) => {\r\n        return Yup.mixed()\r\n            .required('Required')\r\n            .test('validUserName', 'You can not add yourself', (value) => {\r\n                if (value) {\r\n                    if (\r\n                        value === currentUser.userName ||\r\n                        value === currentUser.userMail\r\n                    )\r\n                        return false\r\n                    return true\r\n                }\r\n                return false\r\n            })\r\n            .test(\r\n                'validateIsNotExistingMember',\r\n                'You can not add existing members',\r\n                (value) => {\r\n                    if (value) {\r\n                        let valid = true\r\n\r\n                        for (\r\n                            let index = 0;\r\n                            index < currentMembers.length;\r\n                            index++\r\n                        ) {\r\n                            const { userName, userMail } = currentMembers[index]\r\n                            if (value === userName || value === userMail) {\r\n                                valid = false\r\n                                break\r\n                            }\r\n                        }\r\n                        return valid\r\n                    }\r\n                    return false\r\n                }\r\n            )\r\n    },\r\n}\r\n","/* eslint-disable react/display-name */\r\nimport React from 'react'\r\nimport { DatePicker, Form, Input, TimePicker, Select } from 'antd'\r\n\r\nconst FormItem = Form.Item\r\nconst { Option } = Select\r\n\r\nconst CreateAntField =\r\n    (AntComponent) =>\r\n    ({\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        defaultSelected,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }) => {\r\n        const touched = form.touched[field.name]\r\n        const submitted = submitCount > 0\r\n        const hasError = form.errors[field.name]\r\n        const submittedError = hasError && submitted\r\n        const touchedError = hasError && touched\r\n        const onInputChange = ({ target: { value } }) =>\r\n            form.setFieldValue(field.name, value)\r\n        const onChange = (value) => form.setFieldValue(field.name, value)\r\n        const onBlur = () => form.setFieldTouched(field.name, true)\r\n\r\n        return (\r\n            <FormItem\r\n                label={label}\r\n                hasFeedback={\r\n                    (hasFeedback && submitted) || (hasFeedback && touched)\r\n                }\r\n                help={submittedError || touchedError ? hasError : false}\r\n                validateStatus={\r\n                    submittedError || touchedError ? 'error' : 'success'\r\n                }\r\n            >\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((name) => (\r\n                            <Option key={name}>{name}</Option>\r\n                        ))}\r\n                </AntComponent>\r\n            </FormItem>\r\n        )\r\n    }\r\n\r\nexport const AntSelect = CreateAntField(Select)\r\nexport const AntDatePicker = CreateAntField(DatePicker)\r\nexport const AntInput = CreateAntField(Input)\r\nexport const AntInputPassword = CreateAntField(Input.Password)\r\nexport const AntTimePicker = CreateAntField(TimePicker)\r\n"],"sourceRoot":""}