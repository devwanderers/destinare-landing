{"version":3,"sources":["services/yupValidations.js","components/CreateAntField/index.js","views/AuthView/Forms/SignUp.js"],"names":["SUPPORTED_FORMATS","regex","validations","password","Yup","min","max","matches","required","passwordConfirmation","oneOf","userName","test","value","validator","isAlphanumeric","mail","email","lowercase","phone","name","isAlpha","replace","birthDate","country","state","city","line","postalCode","file","size","includes","type","min20Usd","_v","parseFloat","no0Usd","generic","boolean","onlyNumber","isColor","s","Option","style","color","number","array","validateIsNotCurrentUser","currentUser","currentMembers","userMail","valid","index","length","FormItem","Form","Item","Select","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","props","touched","submitted","hasError","errors","submittedError","touchedError","help","validateStatus","onBlur","setFieldTouched","onChange","target","setFieldValue","map","AntInput","DatePicker","Input","AntInputPassword","Password","TimePicker","schema","firstName","lastName","confirmPassword","initialValues","SigUp","onSubmit","showError","errorMessage","history","useHistory","Fragment","className","validationSchema","values","isSubmitting","component","placeholder","iconRender","visible","message","showIcon","block","htmlType","loading","paddingTop","paddingBottom","top","href","onClick","e","preventDefault","push","LoginInPath"],"mappings":"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","file":"static/js/10.72a75573.chunk.js","sourcesContent":["import * as Yup from 'yup'\nimport validator from 'validator'\n\nexport const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\n\nconst FILE_SIZE = 100 * 1024\n\nexport const regex = {\n    alpha: /^[A-Za-z]+$/,\n    alphaNumeric: /[a-zA-Z0-9]/,\n    atLeastOneUpperCase: /[A-Z]/,\n    phoneNumber:\n        /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\n    exact5: /^[0-9]{5}$/,\n}\n\nexport const validations = {\n    password: Yup.string()\n        .min(8, 'Too Short!')\n        .max(64, 'Too Long!')\n        .matches(\n            regex.atLeastOneUpperCase,\n            'Must contain al least one uppercase letter.'\n        )\n        .required('Required'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required('Required'),\n    userName: Yup.string()\n        .min(3, 'Too Short!')\n        .max(64, 'Too Long!')\n        .test(\n            'alphaNumeric',\n            'Must contain only letters and numbers.',\n            (value) => value && validator.isAlphanumeric(value)\n        )\n        .required('Required'),\n    mail: Yup.string()\n        .max(64, 'Too Long!')\n        .email('Must be a valid email format. example@email.com')\n        .lowercase('Must contain only lower case')\n        .required('Required'),\n    phone: Yup.string()\n        .matches(regex.phoneNumber, 'Must be a valid phone number.')\n        .required('Required'),\n    name: Yup.string()\n        .min(3, 'Too Short!')\n        .max(30, 'Too Long!')\n        .test(\n            'alpha',\n            'Must contain only letters.',\n            (value) =>\n                !value || (value && validator.isAlpha(value.replace(' ', '')))\n        ),\n    // .required('Required'),\n    birthDate: Yup.date().required('Required'),\n    country: Yup.string().required('Required'),\n    state: Yup.string().required('Required'),\n    city: Yup.string().required('Required'),\n    line: Yup.string().required('Required'),\n    postalCode: Yup.string()\n        .matches(regex.exact5, 'Must be exactly 5 digits')\n        .required('Required'),\n    file: Yup.mixed()\n        .required('A file is required')\n        .test(\n            'fileSize',\n            'File too large',\n            (value) => value && value[0].size <= FILE_SIZE\n        )\n        .test(\n            'fileFormat',\n            'Unsupported Format',\n            (value) => value && SUPPORTED_FORMATS.includes(value[0].type)\n        )\n        .required('Required'),\n    min20Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Minimum to invest is 20 USD', (value) => {\n            if (value) {\n                let _v = value\n                _v = _v.replace(/\\D/g, '')\n                _v = parseFloat(_v)\n                return _v >= 20.0\n            }\n            return false\n        }),\n    no0Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Usd amount must be higher than 0', (value) => {\n            if (value) {\n                let _v = value\n                _v = parseFloat(_v)\n                return _v > 0.0\n            }\n            return false\n        }),\n    generic: Yup.string().max(64, 'Too Long!').required('Required'),\n    boolean: Yup.bool().oneOf([true], 'Field must be checked'),\n    onlyNumber: Yup.mixed()\n        .required('Required')\n        .test('onlyNumber', 'Field must be a number', (value) => {\n            if (value) {\n                const _v = value\n                const isnum = /^\\d+$/.test(_v)\n\n                return isnum\n            }\n            return false\n        }),\n    isColor: Yup.mixed()\n        .required('Required')\n        .test(\n            'color',\n            'Field must be a valid color format. Examples. RGBA: rgba(0, 0, 0, 1), HEXA: #000000, RGB: rgb(0,0,0), Color: red',\n            (value) => {\n                if (value) {\n                    const s = new Option().style\n                    s.color = value\n                    return s.color !== ''\n                }\n                return false\n            }\n        ),\n    number: Yup.number().required('Required'),\n    array: Yup.array().required('Required'),\n    validateIsNotCurrentUser: (currentUser, currentMembers) => {\n        return Yup.mixed()\n            .required('Required')\n            .test('validUserName', 'You can not add yourself', (value) => {\n                if (value) {\n                    if (\n                        value === currentUser.userName ||\n                        value === currentUser.userMail\n                    )\n                        return false\n                    return true\n                }\n                return false\n            })\n            .test(\n                'validateIsNotExistingMember',\n                'You can not add existing members',\n                (value) => {\n                    if (value) {\n                        let valid = true\n\n                        for (\n                            let index = 0;\n                            index < currentMembers.length;\n                            index++\n                        ) {\n                            const { userName, userMail } = currentMembers[index]\n                            if (value === userName || value === userMail) {\n                                valid = false\n                                break\n                            }\n                        }\n                        return valid\n                    }\n                    return false\n                }\n            )\n    },\n}\n","/* eslint-disable react/display-name */\nimport React from 'react'\nimport { DatePicker, Form, Input, TimePicker, Select } from 'antd'\n\nconst FormItem = Form.Item\nconst { Option } = Select\n\nconst CreateAntField =\n    (AntComponent) =>\n    ({\n        field,\n        form,\n        hasFeedback,\n        label,\n        selectOptions,\n        submitCount,\n        type,\n        ...props\n    }) => {\n        const touched = form.touched[field.name]\n        const submitted = submitCount > 0\n        const hasError = form.errors[field.name]\n        const submittedError = hasError && submitted\n        const touchedError = hasError && touched\n        const onInputChange = ({ target: { value } }) =>\n            form.setFieldValue(field.name, value)\n        const onChange = (value) => form.setFieldValue(field.name, value)\n        const onBlur = () => form.setFieldTouched(field.name, true)\n        return (\n            <FormItem\n                label={label}\n                hasFeedback={\n                    (hasFeedback && submitted) || (hasFeedback && touched)\n                }\n                help={submittedError || touchedError ? hasError : false}\n                validateStatus={\n                    submittedError || touchedError ? 'error' : 'success'\n                }\n            >\n                <AntComponent\n                    {...field}\n                    {...props}\n                    onBlur={onBlur}\n                    onChange={type ? onInputChange : onChange}\n                >\n                    {selectOptions &&\n                        selectOptions.map((name) => (\n                            <Option key={name}>{name}</Option>\n                        ))}\n                </AntComponent>\n            </FormItem>\n        )\n    }\n\nexport const AntSelect = CreateAntField(Select)\nexport const AntDatePicker = CreateAntField(DatePicker)\nexport const AntInput = CreateAntField(Input)\nexport const AntInputPassword = CreateAntField(Input.Password)\nexport const AntTimePicker = CreateAntField(TimePicker)\n","import React from 'react'\nimport { Formik, Form, Field } from 'formik'\nimport { Button, Form as FormAnt, Alert } from 'antd'\nimport * as Yup from 'yup'\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons'\nimport { validations } from '../../../services/yupValidations'\nimport { useHistory } from 'react-router'\n\nimport { LoginInPath } from '../../../constants/routerConstants'\nimport {\n    AntInput,\n    AntInputPassword,\n} from '../../../components/CreateAntField/index'\n\nconst schema = Yup.object({\n    firstName: validations.name,\n    lastName: validations.name,\n    email: validations.mail,\n    userName: validations.userName,\n    password: validations.password,\n    confirmPassword: validations.passwordConfirmation,\n})\n\nconst initialValues = {\n    firstName: '',\n    lastName: '',\n    userName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n}\n\nconst SigUp = ({ onSubmit, showError, errorMessage }) => {\n    const history = useHistory()\n\n    return (\n        <React.Fragment>\n            <div className=\"font-medium mb-2\">Sign up</div>\n            <Formik\n                validationSchema={schema}\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n            >\n                {({ values, isSubmitting }) => (\n                    <Form className=\"mb-4\">\n                        <div className=\"flex flex-row space-x-2\">\n                            <Field\n                                component={AntInput}\n                                type=\"text\"\n                                name=\"firstName\"\n                                placeholder=\"* First Name\"\n                                className=\"h-12 rounded-lg\"\n                                hasFeedback\n                                value={values?.firstName}\n                            />\n                            <Field\n                                component={AntInput}\n                                type=\"text\"\n                                name=\"lastName\"\n                                placeholder=\"* Last Name\"\n                                className=\"h-12 rounded-lg\"\n                                hasFeedback\n                                value={values?.lastName}\n                            />\n                        </div>\n                        <Field\n                            component={AntInput}\n                            name=\"email\"\n                            type=\"email\"\n                            placeholder=\"Email\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            value={values?.email}\n                        />\n                        <Field\n                            component={AntInput}\n                            type=\"text\"\n                            name=\"userName\"\n                            placeholder=\"Username\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            value={values?.userName}\n                        />\n                        <Field\n                            component={AntInputPassword}\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            iconRender={(visible) =>\n                                visible ? (\n                                    <EyeTwoTone />\n                                ) : (\n                                    <EyeInvisibleOutlined />\n                                )\n                            }\n                            value={values?.password}\n                        />\n                        <Field\n                            component={AntInputPassword}\n                            name=\"confirmPassword\"\n                            type=\"password\"\n                            placeholder=\"Confirm Password\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            iconRender={(visible) =>\n                                visible ? (\n                                    <EyeTwoTone />\n                                ) : (\n                                    <EyeInvisibleOutlined />\n                                )\n                            }\n                            value={values?.confirmPassword}\n                        />\n                        {showError && (\n                            <Alert\n                                className=\"mb-5\"\n                                message={errorMessage}\n                                type=\"error\"\n                                showIcon\n                            />\n                        )}\n\n                        <FormAnt.Item className=\"mb-0\">\n                            <Button\n                                type=\"primary\"\n                                block\n                                className=\"text-sm px-4 py-2 py h-12 rounded-full font-medium\"\n                                htmlType=\"submit\"\n                                loading={isSubmitting}\n                                style={{\n                                    paddingTop: '9px',\n                                    paddingBottom: '9px',\n                                }}\n                            >\n                                Register\n                            </Button>\n                        </FormAnt.Item>\n                    </Form>\n                )}\n            </Formik>\n\n            <div className=\"login-links text-center\">\n                <span\n                    className=\"text-black-1 text-sm h-auto py-0 relative\"\n                    style={{ top: '-7px' }}\n                >\n                    Already have an account.\n                    <a\n                        className=\"font-medium text-blue-200 hover:text-info\"\n                        href=\"#\"\n                        onClick={(e) => {\n                            e.preventDefault()\n\n                            history.push(LoginInPath)\n                        }}\n                    >\n                        {' '}\n                        Log in\n                    </a>\n                </span>\n            </div>\n            {!showError && <div className=\"h-40px mb-5\"></div>}\n        </React.Fragment>\n    )\n}\n\nSigUp.propTypes = {}\n\nexport default SigUp\n"],"sourceRoot":""}